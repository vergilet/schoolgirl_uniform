class <%= class_name %>Form
  include SchoolgirlUniform::Uniformable

  attribute :username, :string
  attribute :password, :string

  attribute :date_of_birth, :date
  attribute :gender, :string
  attribute :favourite_color, :string
  attribute :device_type, :string

  attribute :email, :string
  attribute :phone_number, :string
  attribute :country, :string
  attribute :city, :string
  attribute :address_field_1, :string
  attribute :address_field_2, :string
  attribute :zip_code, :string

  steps %w[first second third]

  def self.step_names
    {
      first: 'Credentials',
      second: 'Personal Details',
      third: 'Contact Information'
    }
  end

  attr_reader :identifier

  # advanced
  # attr_reader :user_id
  # attr_reader :contact_info_id


  with_options if: :first? do |step|
    step.validates :username, presence: true, length: 3..10
    step.validate :custom_username_validation
    step.validates :password, length: { minimum: 3 }
  end

  with_options if: :second? do |step|
    step.validates :date_of_birth, presence: true
    step.validate :custom_date_of_birth_validation
  end

  with_options if: :third? do |step|
    step.validates :email, presence: true
    step.validate :custom_email_validation

    step.validates :phone_number, presence: true
    step.validate :custom_phone_validation
  end

  def custom_username_validation
    errors.add(:username, "#{username} is already taken, enter uniq username") if User.where(username: username).exists?
    errors.add(:username, 'cannot contain "@"') if username.include?('@')
    errors.add(:username, 'cannot contain "#"') if username.include?('#')
    errors.add(:username, 'cannot contain "?"') if username.include?('?')
  end

  def custom_date_of_birth_validation
    begin
      date = Date.parse(date_of_birth.to_s)
      if date > Date.today - 18.years
        errors.add(:date_of_birth, 'You need to be 18 year old or older to participate in this survey.')
      end
    rescue => e
      errors.add(:date_of_birth, 'Please enter a valid date in the format: DD.MM.YYYY')
    end
  end

  def custom_email_validation
    errors.add(:email, 'should contain "@"')      if email.exclude?('@')
    errors.add(:email, 'should not contain ".."') if email.include?('..')
  end

  def custom_phone_validation
    errors.add(:phone_number, 'should be min 3 symbols') if phone_number.size < 3
    errors.add(:phone_number, 'should be max 14 symbols') if phone_number.size > 14
  end


  def save!
    user.save!(validate: false)
    personal_detail.save!(validate: false)
    contact_info.save!(validate: false)
    @identifier = user.id

    # advanced
    # @identifier = {user_id: user.id, contact_info_id: contact_info.id}
    # or
    # @user_id = user.id
    # @contact_info_id = contact_info.id
  end

  private

  def user
    @user ||= User.new(username: username, password: password)
  end

  def personal_detail
    user.build_personal_detail(
      date_of_birth: date_of_birth,
      gender: gender,
      favourite_color: favourite_color,
      device_type: device_type
    )
  end

  def contact_info
    user.build_contact_info(
      email: email,
      phone_number: phone_number,
      country: country,
      city: city,
      address_field_1: address_field_1,
      address_field_2: address_field_2,
      zip_code: zip_code
    )
  end
end
