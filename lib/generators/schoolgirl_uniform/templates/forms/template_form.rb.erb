class <%= class_name %>Form < SchoolgirlUniform::BaseForm

  attribute :username, String
  attribute :password, String

  attribute :date_of_birth, Date
  attribute :gender, String
  attribute :favourite_color, String
  attribute :device_type, String

  attribute :email, String
  attribute :phone_number, String
  attribute :country, String
  attribute :city, String
  attribute :address_field_1, String
  attribute :address_field_2, String
  attribute :zip_code, String

  steps %w[first second third]

  def self.step_names
    {
      first: 'Credentials',
      second: 'Personal Details',
      third: 'Contact Information'
    }
  end

  validates :username, presence: true, length: 3..10, if: first?
  validate :custom_username_validation,               if: first?
  validates :password, length: { minimum: 3 },        if: first?

  validates :date_of_birth, presence: true,           if: second?
  validate :custom_date_of_birth_validation,          if: second?

  validates :email, presence: true,                   if: third?
  validate :custom_email_validation,                  if: third?

  validates :phone_number, presence: true,            if: third?
  validate :custom_phone_validation,                  if: third?

  def custom_username_validation
    errors.add(:username, 'cannot contain "@"') if username.include?('@')
    errors.add(:username, 'cannot contain "#"') if username.include?('#')
    errors.add(:username, 'cannot contain "?"') if username.include?('?')
  end

  def custom_date_of_birth_validation
    begin
      date = Date.parse(date_of_birth.to_s)
      if date > Date.today - 18.years
        errors.add(:date_of_birth, 'You need to be 18 year old or older to participate in this survey.')
      end
    rescue => e
      errors.add(:date_of_birth, 'Please enter a valid date in the format: DD.MM.YYYY')
    end
  end

  def custom_email_validation
    errors.add(:email, 'should contain "@"')      if email.exclude?('@')
    errors.add(:email, 'should not contain ".."') if email.include?('..')
  end

  def custom_phone_validation
    errors.add(:phone_number, 'should be min 9 symbols') if phone_number.size < 8
    errors.add(:phone_number, 'should be max 14 symbols') if phone_number.size > 14
  end


  def save!
    ActiveRecord::Base.transaction do
      user.save!(validate: false)
      personal_detail.save!(validate: false)
      contact_info.save!(validate: false)
    end
    @identifier = user.reload.id
  end

  private

  def user
    @user ||= User.new(username: username, password: password)
  end

  def personal_detail
    user.build_personal_detail(
      date_of_birth: date_of_birth,
      gender: gender,
      favourite_color: favourite_color,
      device_type: device_type
    )
  end

  def contact_info
    user.build_contact_info(
      email: email,
      phone_number: phone_number,
      country: country,
      city: city,
      address_field_1: address_field_1,
      address_field_2: address_field_2,
      zip_code: zip_code
    )
  end
end
