class <%= class_name %>Form < SchoolgirlUniform::BaseForm
  attribute :username, String
  attribute :password, String
  attribute :email, String
  attribute :phone, String

  validates :username, presence: true, length: 3..10, if: proc { on_step('first') }
  validate :custom_username_validation,               if: proc { on_step('first') }
  validates :password, length: { minimum: 3 },        if: proc { on_step('first') }

  validates :email, presence: true,                   if: proc { on_step('second') }
  validate :custom_email_validation,                  if: proc { on_step('second') }

  validates :phone, presence: true,                   if: proc { on_step('third') }
  validate :custom_phone_validation,                  if: proc { on_step('third') }

  def custom_username_validation
    errors.add(:username, 'cannot contain "@"') if username.include?('@')
    errors.add(:username, 'cannot contain "#"') if username.include?('#')
    errors.add(:username, 'cannot contain "?"') if username.include?('?')
  end

  def custom_email_validation
    errors.add(:email, 'should contain "@"') if email.exclude?('@')
    errors.add(:email, 'should not contain ".."') if email.include?('..')
  end

  def custom_phone_validation
    errors.add(:phone, 'should be max 14 symbols') if phone.size > 14
  end

  def self.steps
    %w[first second third]
  end

  def save!
    ActiveRecord::Base.transaction do
      user.save!(validate: false)
      personal_data.save!(validate: false)
    end
    @identifier = user.reload.uuid
  end

  private

  def user
    @user ||= User.new(username: username, password: password)
  end

  def personal_data
    user.build_personal_data(email: email, phone: phone)
  end
end
